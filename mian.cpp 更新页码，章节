#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <sstream>
#include <windows.h> 
#include <regex>     // 引入正则表达式库
#include <unordered_map>

using namespace std;

// 设置控制台代码页为UTF-8
void setConsoleToUTF8() {
    SetConsoleOutputCP(CP_UTF8); // 设置控制台输出为UTF-8
    SetConsoleCP(CP_UTF8);       // 设置控制台输入为UTF-8
}

// 结构体用于存储查询结果
struct SearchResult {
    int index;
    string name;
    int page;
    int chapter;
    string bookName;
    vector<string> context; // 存储上下文的多行内容
};

// 读取文件内容并返回字符串
string readFile(const string& filename) {
    ifstream file(filename, ios::binary); // 以二进制模式打开文件，确保UTF-8编码正确读取
    if (!file) {
        cerr << "Unable to open file: " << filename << endl;
        exit(1);
    }
    stringstream buffer;
    buffer << file.rdbuf();
    return buffer.str();
}

// 英文数字到整数的映射表
const unordered_map<string, int> englishNumberMap = {
    {"zero", 0}, {"one", 1}, {"two", 2}, {"three", 3}, {"four", 4},
    {"five", 5}, {"six", 6}, {"seven", 7}, {"eight", 8}, {"nine", 9},
    {"ten", 10}, {"eleven", 11}, {"twelve", 12}, {"thirteen", 13},
    {"fourteen", 14}, {"fifteen", 15}, {"sixteen", 16}, {"seventeen", 17},
    {"eighteen", 18}, {"nineteen", 19}, {"twenty", 20}, {"twenty-one", 21},
    {"twenty-two", 22}, {"twenty-three", 23}, {"twenty-four", 24}, {"twenty-five", 25},
    {"twenty-six", 26}, {"twenty-seven", 27}, {"twenty-eight", 28}, {"twenty-nine", 29},
    {"thirty", 30}, {"thirty-one", 31}, {"thirty-two", 32}, {"thirty-three", 33},
    {"thirty-four", 34}, {"thirty-five", 35}, {"thirty-six", 36}, {"thirty-seven", 37},
    {"thirty-eight", 38}, {"thirty-nine", 39}, {"forty", 40}, {"forty-one", 41},
    {"forty-two", 42}, {"forty-three", 43}, {"forty-four", 44}, {"forty-five", 45},
    {"forty-six", 46}, {"forty-seven", 47}, {"forty-eight", 48}, {"forty-nine", 49},
    {"fifty", 50}, {"fifty-one", 51}, {"fifty-two", 52}, {"fifty-three", 53},
    {"fifty-four", 54}, {"fifty-five", 55}, {"fifty-six", 56}, {"fifty-seven", 57},
    {"fifty-eight", 58}, {"fifty-nine", 59}, {"sixty", 60}, {"sixty-one", 61},
    {"sixty-two", 62}, {"sixty-three", 63}, {"sixty-four", 64}, {"sixty-five", 65},
    {"sixty-six", 66}, {"sixty-seven", 67}, {"sixty-eight", 68}, {"sixty-nine", 69},
    {"seventy", 70}, {"seventy-one", 71}, {"seventy-two", 72}, {"seventy-three", 73},
    {"seventy-four", 74}, {"seventy-five", 75}, {"seventy-six", 76}, {"seventy-seven", 77},
    {"seventy-eight", 78}, {"seventy-nine", 79}, {"eighty", 80}, {"eighty-one", 81},
    {"eighty-two", 82}, {"eighty-three", 83}, {"eighty-four", 84}, {"eighty-five", 85},
    {"eighty-six", 86}, {"eighty-seven", 87}, {"eighty-eight", 88}, {"eighty-nine", 89},
    {"ninety", 90}, {"ninety-one", 91}, {"ninety-two", 92}, {"ninety-three", 93},
    {"ninety-four", 94}, {"ninety-five", 95}, {"ninety-six", 96}, {"ninety-seven", 97},
    {"ninety-eight", 98}, {"ninety-nine", 99}, {"one hundred", 100}
};

// 检测是否为章节标题行
bool isChapterTitle(const string& line) {
    static const regex chapterRegex(R"(Chapter\s+\w+(\s+\w+)*$)");
    return regex_search(line, chapterRegex);
}

// 检测是否为页码行
bool isPageLine(const string& line) {
    static const regex pageRegex(R"(^\s*\d+\s*$)");
    return regex_match(line, pageRegex);
}

// 人名或地名的搜索，并返回查询结果
vector<SearchResult> searchInBooks(const vector<string>& books, const string& name) {
    vector<SearchResult> results;
    int bookIndex = 1;

    for (const auto& book : books) {
        string bookName = "Harry_Potter_and_the_Book_" + to_string(bookIndex);
        int chapter = 1; // 每本书的章节号从1开始
        int page = 1;    // 初始页码
        int lineCount = 0;     // 当前行号

        istringstream stream(book);
        string line;
        vector<string> lines; // 用于存储当前书的行内容
        while (getline(stream, line)) {
            lines.push_back(line);
        }

        for (size_t i = 0; i < lines.size(); ++i) {
            // 如果遇到页码行，更新页码和行号
            if (isPageLine(lines[i])) {
                page = stoi(lines[i]); // 更新页码为行中的数字
                lineCount = 0;        // 重置行号为0，下一行会增加到1
                continue;
            }

            lineCount++; // 当前行号增加

            // 如果遇到章节标题行，更新章节号
            if (isChapterTitle(lines[i])) {
                static const regex chapterRegex(R"(Chapter\s+(\w+(\s+\w+)*))");
                smatch match;
                if (regex_search(lines[i], match, chapterRegex) && match.size() > 1) {
                    string chapterStr = match[1].str(); // 获取匹配到的英文数字部分
                    auto it = englishNumberMap.find(chapterStr);
                    if (it != englishNumberMap.end()) {
                        chapter = it->second; // 更新章节号为对应的整数值
                    }
                }
                continue;
            }

            // 搜索了一人名或地名
            if (lines[i].find(name) != string::npos) {
                SearchResult result;
                result.index = results.size() + 1;
                result.name = name;
                result.page = page;
                result.chapter = chapter;
                result.bookName = bookName;

                // 获取上下文的前后几行
                const int contextLines = 3; // 前后各显示3行
                for (int j = max(0, static_cast<int>(i) - contextLines); j < min(static_cast<int>(i) + contextLines + 1, static_cast<int>(lines.size())); ++j) {
                    result.context.push_back(lines[j]);
                }

                results.push_back(result);
            }
        }

        bookIndex++;
    }

    return results;
}
